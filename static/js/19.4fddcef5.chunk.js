(this.webpackJsonpportfolio=this.webpackJsonpportfolio||[]).push([[19],{121:function(n,s,a){"use strict";a.r(s),a.d(s,"readingTime",(function(){return o})),a.d(s,"default",(function(){return i})),a.d(s,"tableOfContents",(function(){return l})),a.d(s,"frontMatter",(function(){return r}));var t=a(0),e=a.n(t),p=a(76);const o={text:"3 min read",minutes:2.68,time:160800,words:536},c={};function i({components:n,...s}){return Object(p.b)("wrapper",Object.assign({},c,s,{components:n,mdxType:"MDXLayout"}),Object(p.b)("p",null,"Observer APIs are handy in detecting change and can be used to create responsive applications."),Object(p.b)("p",null,"There are four different types of observers that observe different things\u200a\u2014\u200afrom the DOM to browser performance."),Object(p.b)("h2",{id:"mutationobserver"},Object(p.b)("a",Object.assign({parentName:"h2"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"}),"MutationObserver")),Object(p.b)("p",null,"MutationObserver observes the DOM tree, listening for the changes made to the DOM."),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// Select the node that will be observed for mutations</span>\n<span class="token keyword">const</span> targetNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'element\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Options for the observer (which mutations to observe)</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  attributes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  childList<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  subtree<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create an observer instance linked to a callback to execute when mutations are observed</span>\n<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutations<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  mutations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">mutation</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'childList\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'A child node has been added or removed.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'attributes\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mutation<span class="token punctuation">.</span>attributeName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> attribute was modified.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Start observing the target node for configured mutations</span>\nobserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Later, you can stop observing</span>\nobserver<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}))),Object(p.b)("p",null,"We will be notified when an element\u2019s attributes, text, or contents changed and also monitors the child nodes whether it has been added or removed."),Object(p.b)("p",null,"This is particularly useful for resizing elements in the DOM as well as resetting DOM values."),Object(p.b)("h2",{id:"intersectionobserver"},Object(p.b)("a",Object.assign({parentName:"h2"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"}),"IntersectionObserver")),Object(p.b)("p",null,"IntersectionObserver observes a DOM element\u2019s visibility, listening for changes in its positions."),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// Select the node that will be observed for mutations</span>\n<span class="token keyword">const</span> targetNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'element\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Options for the observer</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  rootMargin<span class="token operator">:</span> <span class="token string">\'-100% 0px 0px 0px\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create an observer instance linked to a callback to execute when entries are observed</span>\n<span class="token keyword">const</span> intersectionObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Observing.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Later, you can stop observing</span>\n      observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Start observing</span>\nintersectionObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}))),Object(p.b)("p",null,"This is very useful in lazy loading and animating content based on the target element\u2019s visibility and positions."),Object(p.b)("h2",{id:"resizeobserver"},Object(p.b)("a",Object.assign({parentName:"h2"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver"}),"ResizeObserver")),Object(p.b)("p",null,"ResizeObserver observes elements\u2019 content or border-box, listening for changes in the element and its children."),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// Select the node that will be observed for mutations</span>\n<span class="token keyword">const</span> targetNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'element\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> resizeObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Element size: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px x </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Element padding: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>top<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px ; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>left<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Later, you can stop observing</span>\n    observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Start observing</span>\nresizeObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}))),Object(p.b)("p",null,"This observer is relevant when creating dynamic content that wraps based on input or triggers."),Object(p.b)("h2",{id:"performanceobserver"},Object(p.b)("a",Object.assign({parentName:"h2"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver"}),"PerformanceObserver")),Object(p.b)("p",null,"PerformanceObserver observes performance measurement events, listening for new performance entries."),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// Options for the observer</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'resource\'</span><span class="token punctuation">,</span> <span class="token string">\'mark\'</span><span class="token punctuation">,</span> <span class="token string">\'measure\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token parameter">list</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// Display each reported measurement on console</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>entryType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>startTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Duration: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>duration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Start observing</span>\nobserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\nperformance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">\'registered-observer\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}))),Object(p.b)("p",null,"This is useful for receiving performance notifications to be ran during idle time without competing with critical rendering work."),Object(p.b)("h2",{id:"conclusion"},"Conclusion"),Object(p.b)("p",null,"The observer APIs unlock the web\u2019s hidden superpowers to create truly responsive experiences, from lazy-loading critical content to non-intrusive performance monitoring."))}i.isMDXComponent=!0;const l=(n={})=>[{id:"mutationobserver",level:2,title:Object(p.b)(e.a.Fragment,null,Object(p.b)(MDXTag,{name:"a",components:n,props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"}},"MutationObserver")),children:[]},{id:"intersectionobserver",level:2,title:Object(p.b)(e.a.Fragment,null,Object(p.b)(MDXTag,{name:"a",components:n,props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"}},"IntersectionObserver")),children:[]},{id:"resizeobserver",level:2,title:Object(p.b)(e.a.Fragment,null,Object(p.b)(MDXTag,{name:"a",components:n,props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver"}},"ResizeObserver")),children:[]},{id:"performanceobserver",level:2,title:Object(p.b)(e.a.Fragment,null,Object(p.b)(MDXTag,{name:"a",components:n,props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver"}},"PerformanceObserver")),children:[]},{id:"conclusion",level:2,title:"Conclusion",children:[]}],r={slug:"observer-api-for-modern-javascript",title:"The Observer API for Modern JavaScript",description:"Observer APIs are handy in detecting change and can be used to create responsive applications.",banner:"observer-api-for-modern-javascript.jpg",bannerPlaceholder:"observer-api-for-modern-javascript-placeholder.jpg",bannerAlt:"JavaScript observer illustration by indepth.dev.",tags:["development","javascript","optimization"],date:"2020-09-27T00:00:00.000Z",readTime:"00:02:00:00"}}}]);
//# sourceMappingURL=19.4fddcef5.chunk.js.map